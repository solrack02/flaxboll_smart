{"1760642936937":{"actionType":"saveAll","createdAt":"1760642936937","actionID":"1760642936937","userID":"#TEMP","path":"system.capsules.65eb5d8f-8e07-4a74-9b38-d27edaf9cedb.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { FlatList } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements, getVarValue, pathSel } from '../project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: {\n    elementProperties: any;\n    pData: any;\n    itemElements: any;\n    styles: any;\n    args: any;\n  };\n};\n\n// FlatList2 - ccc_flatList (newBase)\nexport const FlatList2 = (props: Tprops) => {\n  // ------- set Caps Inputs\n  const { elementProperties, pData, itemElements, styles, args } = props.pass;\n\n  // ---------- set Data Listener\n\n  let watchData = '';\n  if (typeof pData === 'string') watchData = useData(ct => pathSel(ct, pData));\n\n  // ---------- set List Item\n  const renderItem = ({ item, index }: any) => (\n    <>{mapElements(itemElements, { item, index })}</>\n  );\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n  for (let strObj of elementProperties) {\n    if (!strObj) continue;\n    if (!props) continue;\n    if (typeof strObj !== 'string') continue;\n\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp);\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  // ------- set Styles\n  const stl = getStlValues(styles);\n\n  const allProps = {\n    style: stl,\n    data: watchData,\n    renderItem,\n\n    ...userElProps,\n  };\n\n  // ------- set Render\n  return <FlatList {...allProps} />;\n};","newValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { FlatList } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements, getVarValue, pathSel } from '../project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: {\n    elementProperties: any[];\n    pData: any;\n    itemElements: any;\n    styles: any;\n    args: any;\n  };\n};\n\n// FlatList2 - ccc_flatList (newBase)\nexport const FlatList2 = (props: Tprops) => {\n  // ------- set Caps Inputs\n  const { elementProperties = [], pData, itemElements, styles } = props.pass;\n\n  // ---------- get store slice (sempre chama o hook, mas só usa se pData for string)\n  const dataFromStore = useData(ct => {\n    if (typeof pData === 'string') return pathSel(ct, pData);\n    // Retorna algo estável/leve quando NÃO for string (não será usado)\n    return undefined;\n  });\n\n  // ---------- set Data (sem passar pelo useData quando não for string)\n  const watchDataRaw = typeof pData === 'string' ? dataFromStore : pData;\n\n  // Garante que a FlatList receba sempre um array\n  const watchData = Array.isArray(watchDataRaw) ? watchDataRaw : [];\n\n  // ---------- set List Item\n  const renderItem = ({ item, index }: any) => (\n    <>{mapElements(itemElements, { item, index })}</>\n  );\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: Record<string, any> = {};\n  for (const strObj of elementProperties) {\n    if (!strObj || typeof strObj !== 'string') continue;\n\n    const parsedObject = JSON5.parse(strObj);\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n      const [hasVar, varValue] = getVarValue(valueProp);\n      userElProps[keyProp] = hasVar ? varValue : valueProp;\n    }\n  }\n\n  // ------- set Styles\n  const stl = getStlValues(styles);\n\n  const allProps = {\n    style: stl,\n    data: watchData,\n    renderItem,\n    ...userElProps,\n  };\n\n  // ------- set Render\n  return <FlatList {...allProps} />;\n};"}}